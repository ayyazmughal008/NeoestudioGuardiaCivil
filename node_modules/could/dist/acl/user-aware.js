"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const helper_1 = require("./helper");
class UserAware {
    constructor(storage, name) {
        this.storage = storage;
        this.name = name;
    }
    can(action, resource) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield this.storage.getUser(this.name);
            if (user) {
                const policies = yield Promise.all((user.policies || []).map(policy => this.storage.getPolicy(policy)));
                const groups = yield Promise.all((user.groups || []).map(group => this.storage.getGroup(group)));
                const groupPolicies = yield Promise.all(groups
                    .reduce((carry, group) => [...carry, ...((group && group.policies) || [])], [])
                    .map(policy => this.storage.getPolicy(policy)));
                const allows = [
                    ...(user.allows || []),
                    ...groups.reduce((carry, group) => {
                        return [...carry, ...(group && group.allows) || []];
                    }, []),
                    ...groupPolicies.reduce((carry, group) => {
                        return [...carry, ...(group && group.allows) || []];
                    }, []),
                    ...policies.reduce((carry, policy) => {
                        return [...carry, ...(policy && policy.allows) || []];
                    }, []),
                ];
                const denies = [
                    ...(user.denies || []),
                    ...groups.reduce((carry, group) => {
                        return [...carry, ...(group && group.denies) || []];
                    }, []),
                    ...groupPolicies.reduce((carry, group) => {
                        return [...carry, ...(group && group.denies) || []];
                    }, []),
                    ...policies.reduce((carry, policy) => {
                        return [...carry, ...(policy && policy.denies) || []];
                    }, []),
                ];
                return yield helper_1.can({ allows: [...new Set(allows)], denies: [...new Set(denies)] }, action, resource);
            }
            return false;
        });
    }
    cannot(action, resource) {
        return __awaiter(this, void 0, void 0, function* () {
            return !(yield this.can(action, resource));
        });
    }
}
exports.UserAware = UserAware;
//# sourceMappingURL=user-aware.js.map