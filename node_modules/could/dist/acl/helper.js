"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function normStatements(statementsOrAction, resources) {
    return !resources ? statementsOrAction : [{
            actions: Array.isArray(statementsOrAction) ? statementsOrAction : [statementsOrAction],
            resources: Array.isArray(resources) ? resources : [resources],
        }];
}
exports.normStatements = normStatements;
function can(statements, action, resource) {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield isMatch(statements.denies || [], action, resource)) {
            return false;
        }
        if (yield isMatch(statements.allows || [], action, resource)) {
            return true;
        }
        return false;
    });
}
exports.can = can;
function isMatch(statements, action, resource) {
    return __awaiter(this, void 0, void 0, function* () {
        for (const statement of statements) {
            const stActions = Array.isArray(statement.actions) ? statement.actions : [statement.actions];
            if (stActions.indexOf(action) > -1) {
                const stResources = Array.isArray(statement.resources) ? statement.resources : [statement.resources];
                for (const stResource of stResources) {
                    const re = stResource
                        .replace("/", "\\/")
                        .replace(".", "\\.")
                        .replace("*", "[^/]*");
                    if (new RegExp(`^${re}$`).test(resource)) {
                        return true;
                    }
                }
            }
        }
        return false;
    });
}
exports.isMatch = isMatch;
//# sourceMappingURL=helper.js.map