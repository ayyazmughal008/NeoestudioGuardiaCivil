"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class MemoryStorage {
    constructor({ users, roles, groups, policies } = {}) {
        this.users = new Map();
        this.roles = new Map();
        this.groups = new Map();
        this.policies = new Map();
        if (users) {
            users.forEach(user => this.users.set(user.name, user));
        }
        if (roles) {
            roles.forEach(role => this.roles.set(role.name, role));
        }
        if (groups) {
            groups.forEach(policy => this.groups.set(policy.name, policy));
        }
        if (policies) {
            policies.forEach(policy => this.policies.set(policy.name, policy));
        }
    }
    getRole(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.roles.get(name);
        });
    }
    storeRole(role) {
        return __awaiter(this, void 0, void 0, function* () {
            this.roles.set(role.name, role);
        });
    }
    destroyRole(name) {
        return __awaiter(this, void 0, void 0, function* () {
            this.roles.delete(name);
        });
    }
    getUser(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.users.get(name);
        });
    }
    storeUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            this.users.set(user.name, user);
        });
    }
    destroyUser(name) {
        return __awaiter(this, void 0, void 0, function* () {
            this.users.delete(name);
        });
    }
    getGroup(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.groups.get(name);
        });
    }
    storeGroup(group) {
        return __awaiter(this, void 0, void 0, function* () {
            this.groups.set(group.name, group);
        });
    }
    destroyGroup(name) {
        return __awaiter(this, void 0, void 0, function* () {
            this.groups.delete(name);
        });
    }
    getPolicy(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.policies.get(name);
        });
    }
    storePolicy(policy) {
        return __awaiter(this, void 0, void 0, function* () {
            this.policies.set(policy.name, policy);
        });
    }
    destroyPolicy(name) {
        return __awaiter(this, void 0, void 0, function* () {
            this.policies.delete(name);
        });
    }
}
exports.MemoryStorage = MemoryStorage;
//# sourceMappingURL=storage.js.map