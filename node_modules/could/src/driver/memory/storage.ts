import {
  GroupAcl,
  PolicyAcl,
  RoleAcl,
  UserAcl
  } from "../../interfaces/acl"
import { Storage } from "../../interfaces/driver"


export class MemoryStorage implements Storage {

  public users: Map<string, UserAcl> = new Map<string, UserAcl>()
  public roles: Map<string, RoleAcl> = new Map<string, RoleAcl>()
  public groups: Map<string, GroupAcl> = new Map<string, GroupAcl>()
  public policies: Map<string, PolicyAcl> = new Map<string, PolicyAcl>()

  public constructor({users, roles, groups, policies}: {users?: UserAcl[], roles?: RoleAcl[], groups?: RoleAcl[], policies?: PolicyAcl[]} = {}) {
    if (users) {
      users.forEach(user => this.users.set(user.name, user))
    }
    if (roles) {
      roles.forEach(role => this.roles.set(role.name, role))
    }
    if (groups) {
      groups.forEach(policy => this.groups.set(policy.name, policy))
    }
    if (policies) {
      policies.forEach(policy => this.policies.set(policy.name, policy))
    }
  }

  public async getRole(name: string): Promise<RoleAcl | undefined> {
    return this.roles.get(name)
  }

  public async storeRole(role: RoleAcl): Promise<void> {
    this.roles.set(role.name, role)
  }

  public async destroyRole(name: string): Promise<void> {
    this.roles.delete(name)
  }

  public async getUser(name: string): Promise<UserAcl | undefined> {
    return this.users.get(name)
  }

  public async storeUser(user: UserAcl): Promise<void> {
    this.users.set(user.name, user)
  }

  public async destroyUser(name: string): Promise<void> {
    this.users.delete(name)
  }

  public async getGroup(name: string): Promise<GroupAcl | undefined> {
    return this.groups.get(name)
  }

  public async storeGroup(group: GroupAcl): Promise<void> {
    this.groups.set(group.name, group)
  }

  public async destroyGroup(name: string): Promise<void> {
    this.groups.delete(name)
  }

  public async getPolicy(name: string): Promise<PolicyAcl | undefined> {
    return this.policies.get(name)
  }

  public async storePolicy(policy: PolicyAcl): Promise<void> {
    this.policies.set(policy.name, policy)
  }

  public async destroyPolicy(name: string): Promise<void> {
    this.policies.delete(name)
  }
}
