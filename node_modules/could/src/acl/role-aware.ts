import { Aware, Statement } from "../interfaces/acl"
import { Storage } from "../interfaces/driver"
import { can } from "./helper"

export class RoleAware implements Aware {
  constructor(public storage: Storage, public name: string) {
  }

  public async can(action: string, resource: string): Promise<boolean> {
    const role = await this.storage.getRole(this.name)
    if (role) {
      const policies = (await Promise.all(
        (role.policies || []).map(policy => this.storage.getPolicy(policy))
      ))
      const allows = [
        ...(role.allows || []),
        ...policies.reduce((carry, policy) => {
          return [...carry, ...(policy && policy.allows) || []]
        }, [] as Statement[]),
      ]
      const denies = [
        ...(role.denies || []),
        ...policies.reduce((carry, policy) => {
          return [...carry, ...(policy && policy.denies) || []]
        }, [] as Statement[]),
      ]
      return await can({allows: [...new Set(allows)], denies: [...new Set(denies)]}, action, resource)
    }
    return false
  }

  public async cannot(action: string, resource: string): Promise<boolean> {
    return !await this.can(action, resource)
  }
}
