import { HasStatements, Statement } from "../interfaces/acl"


export function normStatements(statementsOrAction: string|string[]|Statement[], resources?: string|string[]): Statement[] {
  return !resources ? statementsOrAction as Statement[] : [{
    actions: Array.isArray(statementsOrAction) ? statementsOrAction as string[] : [statementsOrAction],
    resources: Array.isArray(resources) ? resources : [resources as string],
  }]
}

export async function can(statements: HasStatements, action: string, resource: string): Promise<boolean> {
  if (await isMatch(statements.denies || [], action, resource)) {
    return false
  }
  if (await isMatch(statements.allows || [], action, resource)) {
    return true
  }
  return false
}

export async function isMatch(statements: Statement[], action: string, resource: string): Promise<boolean> {
  for (const statement of statements) {
    const stActions = Array.isArray(statement.actions) ? statement.actions : [statement.actions]
    if (stActions.indexOf(action) > -1) {
      const stResources = Array.isArray(statement.resources) ? statement.resources : [statement.resources]
      for (const stResource of stResources) {
        const re = stResource
          .replace("/", "\\/")
          .replace(".", "\\.")
          .replace("*", "[^/]*")
        if (new RegExp(`^${re}$`).test(resource)) {
          return true
        }
      }
    }
  }
  return false
}
